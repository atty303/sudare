name: Debug

on: workflow_dispatch

jobs:
#  debug:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

  build:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Install coreutils for macOS
        if: matrix.os == 'macos-latest'
        run: brew install coreutils
      - name: Create archive
        id: archive
        run: |
          project=sudare
          target_dir="$(cargo metadata --format-version=1 --no-deps | jq -r .target_directory)/${{ matrix.target }}/release"
          archive="${project}-${{ matrix.target }}"
          archive_path="$(pwd)/${archive}.tar.gz"
          tempdir=$(mktemp -d)
          cp ${target_dir}/${project} ${tempdir}
          ( cd ${tempdir} && tar acf ${archive_path} ${project} )
          rm -rf $tempdir
          echo "archive_path=${archive_path}" >>$GITHUB_OUTPUT
          echo "archive_sha256=$(sha256sum README.md | cut -d ' ' -f 1)" >>$GITHUB_OUTPUT
      - name: Release
        id: upload_asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.archive.outputs.archive_path }}
          fail_on_unmatched_files: true
          tag_name: v0.1.3
          name: 0.1.3
      - id: generate_unique_id
        run: |
          echo '${{ toJSON(matrix) }}' > ./matrix.txt
          echo '::set-output name=result::${{ hashFiles('./matrix.txt') }}'
      - id: generate_outputs
        run: |
          echo "${{ steps.archive.outputs.archive_sha256 }} ${{ fromJSON(steps.upload_asset.outputs.assets)[0].browser_download_url }}" >outputs.txt
      - name: Upload outputs
        uses: actions/upload-artifact@v2
        with:
          name: outputs-${{ steps.generate_unique_id.outputs.result }}
          path: ${{ github.workspace }}/outputs.txt

  taps:
    needs: [build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: outputs
      - run: |
          ls outputs
          cat outputs/*
