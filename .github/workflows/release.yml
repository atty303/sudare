name: Release new version

permissions:
  contents: write

env:
  PROJECT_NAME: sudare

on:
  workflow_dispatch:
    inputs:
      version_override:
        type: string
        description: 'Override version'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: Calculate new version
        id: tag_version
        if: ${{ !inputs.version_override }}
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true

      - uses: haya14busa/action-cond@v1
        id: version
        with:
          cond: ${{ !inputs.version_override }}
          if_true: ${{ steps.tag_version.outputs.new_version }}
          if_false: ${{ inputs.version_override }}

      - name: Stop workflow if there hasn't been any new commit
        if: ${{ !steps.version.outputs.value }}
        run: exit 1

      - name: Bump version of Cargo.toml
        run: |
          sed -i -e 's/^version = ".*"$/version = "${{ steps.version.outputs.value }}"/' Cargo.toml
          cargo update -p ${PROJECT_NAME}

      - name: Commit and tag the new version
        uses: EndBug/add-and-commit@v9
        with:
          add: Cargo.toml Cargo.lock
          message: Bump version to ${{ steps.version.outputs.value }}
          tag: v${{ steps.version.outputs.value }} --force
          tag_push: --force

      - name: Create a GitHub release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.value }}
          name: ${{ steps.version.outputs.value }}
          body: ${{ steps.tag_version.outputs.changelog }}
    outputs:
      version: ${{ steps.version.outputs.value }}
      tag: v${{ steps.version.outputs.value }}

  build:
    needs: release
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Install coreutils for macOS
        if: matrix.os == 'macos-latest'
        run: brew install coreutils
      - name: Create archive
        id: archive
        run: |
          target_dir="$(cargo metadata --format-version=1 --no-deps | jq -r .target_directory)/${{ matrix.target }}/release"
          archive="${PROJECT_NAME}-${{ matrix.target }}"
          archive_path="$(pwd)/${archive}.tar.gz"
          tempdir=$(mktemp -d)
          cp ${target_dir}/${PROJECT_NAME} ${tempdir}
          ( cd ${tempdir} && tar acf ${archive_path} ${PROJECT_NAME} )
          rm -rf $tempdir
          echo "archive_path=${archive_path}" >>$GITHUB_OUTPUT
          echo "archive_sha256=$(sha256sum ${archive_path} | cut -d ' ' -f 1)" >>$GITHUB_OUTPUT

      - name: Release
        id: upload_asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.archive.outputs.archive_path }}
          fail_on_unmatched_files: true
          tag_name: ${{ needs.release.outputs.tag }}

      - run: echo "${{ toJSON(matrix) }}" >matrix.txt
      - id: generate_unique_id
        run: echo "result=${{ hashFiles('matrix.txt') }}" >>$GITHUB_OUTPUT
      - run: echo "${{ matrix.target }} ${{ steps.archive.outputs.archive_sha256 }} ${{ fromJSON(steps.upload_asset.outputs.assets)[0].browser_download_url }}" >outputs.txt
      - name: Upload outputs
        uses: actions/upload-artifact@v3
        with:
          name: outputs-${{ steps.generate_unique_id.outputs.result }}
          path: ${{ github.workspace }}/outputs.txt

  taps:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: outputs
      - id: payload
        run: |
          echo -n "{" >payload.json
          cat outputs/*/* |  sed -e 's/\([^ ]*\) \([^ ]*\) \(.*\)/"\1":{"sha256":"\2","url":"\3"}/' | tr '\n' ',' | sed 's/,$//' >>payload.json
          echo -n "}" >>payload.json
          cat payload.json
          echo "payload_json=$(cat payload.json)" >>$GITHUB_OUTPUT

      - uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.TAP_GITHUB_TOKEN }}
          repository: atty303/homebrew-tap
          event-type: update-${{ env.PROJECT_NAME }}
          client-payload: ${{ steps.payload.outputs.payload_json }}
